{"ast":null,"code":"var _jsxFileName = \"/Users/mat/workspace/Projet-Studi/game-dice/src/components/game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Player from \"./player\";\nimport DiceRoll from \"./diceRoll\";\nimport \"../styles/game.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst buttonStyles = {\n  backgroundColor: \"black\",\n  color: \"white\",\n  padding: \"10px\",\n  margin: \"0.5rem\",\n  borderRadius: \"0.2rem\",\n  width: \"42%\",\n  boxShadow: \"none\",\n  border: \"none\",\n  cursor: \"pointer\",\n  fontSize: 16,\n  fontWeight: \"bold\",\n  letterSpacing: 0.25\n};\nfunction resetGame() {\n  return [{\n    id: 1,\n    globalScore: 0,\n    roundScore: 0\n  }, {\n    id: 2,\n    globalScore: 0,\n    roundScore: 0\n  }];\n}\nfunction Game() {\n  _s();\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\n  const [wins, setWins] = useState([0, 0]);\n  const [players, setPlayers] = useState([{\n    id: 1,\n    globalScore: 0,\n    roundScore: 0\n  }, {\n    id: 2,\n    globalScore: 0,\n    roundScore: 0\n  }]);\n  function restartGame() {\n    setWins([0, 0]);\n    setPlayers([{\n      id: 1,\n      globalScore: 0,\n      roundScore: 0\n    }, {\n      id: 2,\n      globalScore: 0,\n      roundScore: 0\n    }]);\n    setCurrentPlayerIndex(0);\n  }\n  function updatePlayerScore(players, currentPlayerIndex, value, isHold) {\n    const updatedPlayers = players.map((player, index) => {\n      if (index === currentPlayerIndex) {\n        let globalScore = player.globalScore;\n        let roundScore = player.roundScore;\n        if (isHold) {\n          globalScore += roundScore;\n          roundScore = 0;\n        } else {\n          roundScore += value;\n        }\n        return {\n          ...player,\n          globalScore,\n          roundScore\n        };\n      }\n      return player;\n    });\n    const currentPlayer = updatedPlayers[currentPlayerIndex];\n    if (currentPlayer.globalScore >= 100) {\n      const updatedWins = [...wins];\n      updatedWins[currentPlayerIndex] = (updatedWins[currentPlayerIndex] || 0) + 1;\n      setWins(updatedWins);\n      setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n      setWins(updatedWins);\n      alert(`Le joueur ${currentPlayer.id} a gagné !`);\n      setPlayers(resetGame);\n    } else {\n      const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;\n      setCurrentPlayerIndex(nextPlayerIndex);\n      setPlayers(updatedPlayers);\n    }\n  }\n  const rollDice = value => {\n    // Mettre à jour le score du joueur en cours\n    const updatedPlayers = players.map((player, index) => {\n      if (index === currentPlayerIndex) {\n        return {\n          ...player,\n          updatePlayerScore: player.globalScore + player.roundScore,\n          roundScore: player.roundScore + value\n        };\n      }\n      return player;\n    });\n\n    // Si le joueur actuel a fait deux lancers, passer au joueur suivant\n    if (value === 1 || value === 6) {\n      const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;\n      setCurrentPlayerIndex(nextPlayerIndex);\n    }\n\n    // Mettre à jour les scores globaux si le joueur a atteint 100 points\n    if (updatedPlayers) {\n      setPlayers(updatedPlayers);\n    }\n  };\n\n  //   const rollDice = (value: number) => {\n  //     // Mettre à jour le score du joueur en cours\n  //     const updatedPlayers = players.map((player, index) => {\n  //       if (index === currentPlayerIndex) {\n  //         return {\n  //           ...player,\n  //           roundScore: player.roundScore + value,\n  //         };\n  //       }\n  //       return player;\n  //     });\n\n  //     // Si le joueur actuel a fait deux lancers, passer au joueur suivant\n  //     if (value === 1 || value === 6) {\n  //       const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;\n  //       setCurrentPlayerIndex(nextPlayerIndex);\n  //     }\n\n  //     // Mettre à jour les scores globaux si le joueur a atteint 100 points\n  //     const currentPlayer = updatedPlayers[currentPlayerIndex];\n  //     if (currentPlayer.roundScore + currentPlayer.globalScore >= 100) {\n  //       alert(`Le joueur ${currentPlayer.id} a gagné !`);\n  //       const updatedWins = [...wins];\n  //       const winnerIndex = currentPlayer.id - 1;\n  //       updatedWins[winnerIndex] += 1;\n  //       setWins(updatedWins);\n\n  //       setPlayers(resetGame);\n  //       setCurrentPlayerIndex(0);\n  //     } else {\n  //       setPlayers(updatedPlayers);\n  //     }\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: buttonStyles,\n          className: \"click\",\n          onClick: restartGame,\n          children: \"New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-info-container\",\n            children: players.map((player, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Player, {\n                player: player,\n                id: index + 1,\n                isActive: index === currentPlayerIndex\n              }, player.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"player-info-container\",\n                children: [\"Score :\", currentPlayerIndex === index ? player.roundScore : player.globalScore]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"player-info-container\",\n                children: [\"Wins: \", wins[index] || 0]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this)\n        }, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"player-info-container\",\n            children: [\"Tour du Joueur \", players[currentPlayerIndex].id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(DiceRoll, {\n              onRoll: rollDice\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: buttonStyles,\n            className: \"click\",\n            onClick: () => updatePlayerScore(players, currentPlayerIndex, 0, true),\n            children: \"Hold\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Game, \"6kpO+F0x2qsU6/4buHDNZckYCDM=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","Player","DiceRoll","jsxDEV","_jsxDEV","Fragment","_Fragment","buttonStyles","backgroundColor","color","padding","margin","borderRadius","width","boxShadow","border","cursor","fontSize","fontWeight","letterSpacing","resetGame","id","globalScore","roundScore","Game","_s","currentPlayerIndex","setCurrentPlayerIndex","wins","setWins","players","setPlayers","restartGame","updatePlayerScore","value","isHold","updatedPlayers","map","player","index","currentPlayer","updatedWins","length","alert","nextPlayerIndex","rollDice","children","className","style","onClick","fileName","_jsxFileName","lineNumber","columnNumber","isActive","onRoll","_c","$RefreshReg$"],"sources":["/Users/mat/workspace/Projet-Studi/game-dice/src/components/game.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport Player from \"./player\";\nimport { PlayerData } from \"./playerData\";\nimport DiceRoll from \"./diceRoll\";\nimport \"../styles/game.css\";\n\nconst buttonStyles = {\n  backgroundColor: \"black\",\n  color: \"white\",\n  padding: \"10px\",\n  margin: \"0.5rem\",\n  borderRadius: \"0.2rem\",\n  width: \"42%\",\n  boxShadow: \"none\",\n  border: \"none\",\n  cursor: \"pointer\",\n  fontSize: 16,\n  fontWeight: \"bold\",\n  letterSpacing: 0.25,\n};\nfunction resetGame() {\n  return [\n    { id: 1, globalScore: 0, roundScore: 0 },\n    { id: 2, globalScore: 0, roundScore: 0 },\n  ];\n}\n\nfunction Game() {\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState<number>(0);\n  const [wins, setWins] = useState<number[]>([0, 0]);\n  const [players, setPlayers] = useState<PlayerData[]>([\n    { id: 1, globalScore: 0, roundScore: 0 },\n    { id: 2, globalScore: 0, roundScore: 0 },\n  ]);\n\n  function restartGame() {\n    setWins([0, 0]);\n    setPlayers([\n      { id: 1, globalScore: 0, roundScore: 0 },\n      { id: 2, globalScore: 0, roundScore: 0 },\n    ]);\n    setCurrentPlayerIndex(0);\n  }\n\n  function updatePlayerScore(\n    players: PlayerData[],\n    currentPlayerIndex: number,\n    value: number,\n    isHold: boolean\n  ) {\n    const updatedPlayers = players.map((player, index) => {\n      if (index === currentPlayerIndex) {\n        let globalScore = player.globalScore;\n        let roundScore = player.roundScore;\n        if (isHold) {\n          globalScore += roundScore;\n          roundScore = 0;\n        } else {\n          roundScore += value;\n        }\n        return {\n          ...player,\n          globalScore,\n          roundScore,\n        };\n      }\n      return player;\n    });\n\n    const currentPlayer = updatedPlayers[currentPlayerIndex];\n    if (currentPlayer.globalScore >= 100) {\n      const updatedWins = [...wins];\n      updatedWins[currentPlayerIndex] =\n        (updatedWins[currentPlayerIndex] || 0) + 1;\n      setWins(updatedWins);\n      setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n      setWins(updatedWins);\n      alert(`Le joueur ${currentPlayer.id} a gagné !`);\n      setPlayers(resetGame);\n    } else {\n      const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;\n      setCurrentPlayerIndex(nextPlayerIndex);\n      setPlayers(updatedPlayers);\n    }\n  }\n\n  const rollDice = (value: number) => {\n    // Mettre à jour le score du joueur en cours\n    const updatedPlayers = players.map((player, index) => {\n      if (index === currentPlayerIndex) {\n        return {\n          ...player,\n          updatePlayerScore: player.globalScore + player.roundScore,\n          roundScore: player.roundScore + value,\n        };\n      }\n      return player;\n    });\n\n    // Si le joueur actuel a fait deux lancers, passer au joueur suivant\n    if (value === 1 || value === 6) {\n      const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;\n      setCurrentPlayerIndex(nextPlayerIndex);\n    }\n\n    // Mettre à jour les scores globaux si le joueur a atteint 100 points\n    if (updatedPlayers) {\n      setPlayers(updatedPlayers);\n    }\n  };\n\n  //   const rollDice = (value: number) => {\n  //     // Mettre à jour le score du joueur en cours\n  //     const updatedPlayers = players.map((player, index) => {\n  //       if (index === currentPlayerIndex) {\n  //         return {\n  //           ...player,\n  //           roundScore: player.roundScore + value,\n  //         };\n  //       }\n  //       return player;\n  //     });\n\n  //     // Si le joueur actuel a fait deux lancers, passer au joueur suivant\n  //     if (value === 1 || value === 6) {\n  //       const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;\n  //       setCurrentPlayerIndex(nextPlayerIndex);\n  //     }\n\n  //     // Mettre à jour les scores globaux si le joueur a atteint 100 points\n  //     const currentPlayer = updatedPlayers[currentPlayerIndex];\n  //     if (currentPlayer.roundScore + currentPlayer.globalScore >= 100) {\n  //       alert(`Le joueur ${currentPlayer.id} a gagné !`);\n  //       const updatedWins = [...wins];\n  //       const winnerIndex = currentPlayer.id - 1;\n  //       updatedWins[winnerIndex] += 1;\n  //       setWins(updatedWins);\n\n  //       setPlayers(resetGame);\n  //       setCurrentPlayerIndex(0);\n  //     } else {\n  //       setPlayers(updatedPlayers);\n  //     }\n  //   };\n\n  return (\n    <>\n      <div className=\"image\">\n        <div className=\"game-container\">\n          <button style={buttonStyles} className=\"click\" onClick={restartGame}>\n            New Game\n          </button>\n          <>\n            <div className=\"player-info-container\">\n              {players.map((player, index) => (\n                <div>\n                  <Player\n                    key={player.id}\n                    player={player}\n                    id={index + 1}\n                    isActive={index === currentPlayerIndex}\n                  />\n                  {}\n                  <p className=\"player-info-container\">\n                    Score :\n                    {currentPlayerIndex === index\n                      ? player.roundScore\n                      : player.globalScore}\n                  </p>\n                  <p className=\"player-info-container\">\n                    Wins: {wins[index] || 0}\n                  </p>\n                </div>\n              ))}\n            </div>\n          </>\n          <div>\n            <h2 className=\"player-info-container\">\n              Tour du Joueur {players[currentPlayerIndex].id}\n            </h2>\n            <div>\n              <DiceRoll onRoll={rollDice} />\n            </div>\n\n            <button\n              style={buttonStyles}\n              className=\"click\"\n              onClick={() =>\n                updatePlayerScore(players, currentPlayerIndex, 0, true)\n              }\n            >\n              Hold\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}