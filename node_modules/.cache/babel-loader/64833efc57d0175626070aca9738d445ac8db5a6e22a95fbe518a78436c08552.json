{"ast":null,"code":"var _jsxFileName = \"/Users/mat/workspace/Projet-Studi/game-dice/src/components/game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Player from \"./player\";\nimport DiceRoll from \"./diceRoll\";\nimport \"../styles/game.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst buttonStyles = {\n  backgroundColor: \"black\",\n  color: \"white\",\n  padding: \"10px\",\n  margin: \"0.3rem\",\n  borderRadius: \"0.2rem\",\n  width: \"42%\",\n  boxShadow: \"none\",\n  border: \"none\",\n  cursor: \"pointer\",\n  fontSize: 16,\n  fontWeight: \"bold\",\n  letterSpacing: 0.25\n};\nfunction resetGame() {\n  return [{\n    id: 1,\n    globalScore: 0,\n    roundScore: 0\n  }, {\n    id: 2,\n    globalScore: 0,\n    roundScore: 0\n  }];\n}\nfunction Game() {\n  _s();\n  const onNextPlayer = () => {\n    const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;\n    setCurrentPlayerIndex(nextPlayerIndex);\n  };\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\n  const [wins, setWins] = useState([0, 0]);\n  const [players, setPlayers] = useState([{\n    id: 1,\n    globalScore: 0,\n    roundScore: 0\n  }, {\n    id: 2,\n    globalScore: 0,\n    roundScore: 0\n  }]);\n  function restartGame() {\n    setWins([0, 0]);\n    setPlayers([{\n      id: 1,\n      globalScore: 0,\n      roundScore: 0\n    }, {\n      id: 2,\n      globalScore: 0,\n      roundScore: 0\n    }]);\n    setCurrentPlayerIndex(0);\n  }\n  function updatePlayerScore(players, currentPlayerIndex, value, isHold) {\n    const updatedPlayers = players.map((player, index) => {\n      if (index === currentPlayerIndex) {\n        let globalScore = player.globalScore;\n        let roundScore = player.roundScore;\n        if (isHold) {\n          globalScore += roundScore;\n          roundScore = 0;\n        } else {\n          roundScore += value;\n        }\n        return {\n          ...player,\n          globalScore,\n          roundScore\n        };\n      }\n      return player;\n    });\n    const currentPlayer = updatedPlayers[currentPlayerIndex];\n    if (currentPlayer.globalScore >= 100) {\n      const updatedWins = [...wins];\n      updatedWins[currentPlayerIndex] = (updatedWins[currentPlayerIndex] || 0) + 1;\n      setWins(updatedWins);\n      setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n      setWins(updatedWins);\n      alert(`Le joueur ${currentPlayer.id} a gagné !`);\n      setPlayers(resetGame);\n    } else {\n      const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;\n      setCurrentPlayerIndex(nextPlayerIndex);\n      setPlayers(updatedPlayers);\n    }\n  }\n  const rollDice = value => {\n    // Mettre à jour le score du joueur en cours\n    const updatedPlayers = players.map((player, index) => {\n      if (index === currentPlayerIndex) {\n        return {\n          ...player,\n          updatePlayerScore: player.globalScore + player.roundScore,\n          roundScore: player.roundScore + value\n        };\n      }\n      return player;\n    });\n\n    // Si le joueur actuel a fait deux lancers, passer au joueur suivant\n    if (value === 1 || value === 6) {\n      const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;\n      setCurrentPlayerIndex(nextPlayerIndex);\n    }\n\n    // Mettre à jour les scores globaux si le joueur a atteint 100 points\n    if (updatedPlayers) {\n      setPlayers(updatedPlayers);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        style: buttonStyles,\n        className: \"click\",\n        onClick: restartGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-info-container\",\n          children: players.map((player, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Player, {\n              player: player,\n              id: index + 1,\n              isActive: index === currentPlayerIndex\n            }, player.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"player-info-container\",\n              children: [\"Score :\", currentPlayerIndex === index ? player.roundScore : player.globalScore]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"player-info-container\",\n              children: [\"Wins: \", wins[index] || 0]\n            }, player.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: buttonStyles,\n          className: \"click\",\n          onClick: () => updatePlayerScore(players, currentPlayerIndex, 0, true),\n          children: \"Hold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"player\",\n          children: [\"Round of\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: players[currentPlayerIndex] ? \"active\" : \"\",\n            children: [\"Player \", players[currentPlayerIndex].id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DiceRoll, {\n          onRoll: rollDice,\n          onNextPlayer: onNextPlayer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Game, \"6kpO+F0x2qsU6/4buHDNZckYCDM=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","Player","DiceRoll","jsxDEV","_jsxDEV","Fragment","_Fragment","buttonStyles","backgroundColor","color","padding","margin","borderRadius","width","boxShadow","border","cursor","fontSize","fontWeight","letterSpacing","resetGame","id","globalScore","roundScore","Game","_s","onNextPlayer","nextPlayerIndex","currentPlayerIndex","players","length","setCurrentPlayerIndex","wins","setWins","setPlayers","restartGame","updatePlayerScore","value","isHold","updatedPlayers","map","player","index","currentPlayer","updatedWins","alert","rollDice","children","className","style","onClick","fileName","_jsxFileName","lineNumber","columnNumber","isActive","onRoll","_c","$RefreshReg$"],"sources":["/Users/mat/workspace/Projet-Studi/game-dice/src/components/game.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport Player from \"./player\";\nimport { PlayerData } from \"./playerData\";\nimport DiceRoll from \"./diceRoll\";\nimport \"../styles/game.css\";\n\nconst buttonStyles = {\n  backgroundColor: \"black\",\n  color: \"white\",\n  padding: \"10px\",\n  margin: \"0.3rem\",\n  borderRadius: \"0.2rem\",\n  width: \"42%\",\n  boxShadow: \"none\",\n  border: \"none\",\n  cursor: \"pointer\",\n  fontSize: 16,\n  fontWeight: \"bold\",\n  letterSpacing: 0.25,\n};\nfunction resetGame() {\n  return [\n    { id: 1, globalScore: 0, roundScore: 0 },\n    { id: 2, globalScore: 0, roundScore: 0 },\n  ];\n}\n\nfunction Game() {\n  const onNextPlayer = () => {\n    const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;\n    setCurrentPlayerIndex(nextPlayerIndex);\n  };\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState<number>(0);\n  const [wins, setWins] = useState<number[]>([0, 0]);\n  const [players, setPlayers] = useState<PlayerData[]>([\n    { id: 1, globalScore: 0, roundScore: 0 },\n    { id: 2, globalScore: 0, roundScore: 0 },\n  ]);\n\n  function restartGame() {\n    setWins([0, 0]);\n    setPlayers([\n      { id: 1, globalScore: 0, roundScore: 0 },\n      { id: 2, globalScore: 0, roundScore: 0 },\n    ]);\n    setCurrentPlayerIndex(0);\n  }\n\n  function updatePlayerScore(\n    players: PlayerData[],\n    currentPlayerIndex: number,\n    value: number,\n    isHold: boolean\n  ) {\n    const updatedPlayers = players.map((player, index) => {\n      if (index === currentPlayerIndex) {\n        let globalScore = player.globalScore;\n        let roundScore = player.roundScore;\n        if (isHold) {\n          globalScore += roundScore;\n          roundScore = 0;\n        } else {\n          roundScore += value;\n        }\n        return {\n          ...player,\n          globalScore,\n          roundScore,\n        };\n      }\n      return player;\n    });\n\n    const currentPlayer = updatedPlayers[currentPlayerIndex];\n    if (currentPlayer.globalScore >= 100) {\n      const updatedWins = [...wins];\n      updatedWins[currentPlayerIndex] =\n        (updatedWins[currentPlayerIndex] || 0) + 1;\n      setWins(updatedWins);\n      setCurrentPlayerIndex((currentPlayerIndex + 1) % players.length);\n      setWins(updatedWins);\n      alert(`Le joueur ${currentPlayer.id} a gagné !`);\n      setPlayers(resetGame);\n    } else {\n      const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;\n      setCurrentPlayerIndex(nextPlayerIndex);\n      setPlayers(updatedPlayers);\n    }\n  }\n\n  const rollDice = (value: number) => {\n    // Mettre à jour le score du joueur en cours\n    const updatedPlayers = players.map((player, index) => {\n      if (index === currentPlayerIndex) {\n        return {\n          ...player,\n          updatePlayerScore: player.globalScore + player.roundScore,\n          roundScore: player.roundScore + value,\n        };\n      }\n      return player;\n    });\n\n    // Si le joueur actuel a fait deux lancers, passer au joueur suivant\n    if (value === 1 || value === 6) {\n      const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;\n      setCurrentPlayerIndex(nextPlayerIndex);\n    }\n\n    // Mettre à jour les scores globaux si le joueur a atteint 100 points\n    if (updatedPlayers) {\n      setPlayers(updatedPlayers);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"game-container\">\n        <button style={buttonStyles} className=\"click\" onClick={restartGame}>\n          New Game\n        </button>\n        <>\n          <div className=\"player-info-container\">\n            {players.map((player, index) => (\n              <div>\n                <Player\n                  key={player.id}\n                  player={player}\n                  id={index + 1}\n                  isActive={index === currentPlayerIndex}\n                />\n                <p className=\"player-info-container\">\n                  Score :\n                  {currentPlayerIndex === index\n                    ? player.roundScore\n                    : player.globalScore}\n                </p>\n                <p key={player.id} className=\"player-info-container\">\n                  Wins: {wins[index] || 0}\n                </p>\n              </div>\n            ))}\n          </div>\n          <button\n            style={buttonStyles}\n            className=\"click\"\n            onClick={() =>\n              updatePlayerScore(players, currentPlayerIndex, 0, true)\n            }\n          >\n            Hold\n          </button>\n        </>\n        <div>\n          <h2 className=\"player\">\n            Round of{\" \"}\n            <span className={players[currentPlayerIndex] ? \"active\" : \"\"}>\n              Player {players[currentPlayerIndex].id}\n            </span>\n          </h2>\n\n          <DiceRoll onRoll={rollDice} onNextPlayer={onNextPlayer} />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}