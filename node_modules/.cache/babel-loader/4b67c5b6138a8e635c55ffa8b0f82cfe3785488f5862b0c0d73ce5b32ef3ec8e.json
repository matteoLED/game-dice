{"ast":null,"code":"var _jsxFileName = \"/Users/mat/workspace/ProjetStudi/gamestudiprojet/src/components/game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Player from \"./player\";\nimport DiceRoll from \"./diceRoll\";\nimport \"../styles/game.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Game() {\n  _s();\n  const [players, setPlayers] = useState([{\n    id: 1,\n    globalScore: 0,\n    roundScore: 0\n  }, {\n    id: 2,\n    globalScore: 0,\n    roundScore: 0\n  }]);\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\n  const rollDice = value => {\n    // Mettre à jour le score du joueur en cours\n    const updatedPlayers = players.map((player, index) => {\n      if (index === currentPlayerIndex) {\n        return {\n          ...player,\n          roundScore: player.roundScore + value\n        };\n      }\n      return player;\n    });\n    setPlayers(updatedPlayers);\n\n    // Passer au joueur suivant si le dé affiche 1 ou si le tour est terminé\n    if (value === 1 || updatedPlayers[currentPlayerIndex].roundScore >= 20) {\n      const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;\n      setCurrentPlayerIndex(nextPlayerIndex);\n\n      // Réinitialiser le score de tous les joueurs\n      const resetPlayers = players.map(player => ({\n        ...player,\n        roundScore: 0\n      }));\n      setPlayers(resetPlayers);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Mon jeu de d\\xE9s\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-info-container\",\n          children: players.map((player, index) => /*#__PURE__*/_jsxDEV(Player, {\n            player: player,\n            id: index + 1,\n            isActive: index === currentPlayerIndex\n          }, player.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game__turn\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Tour de Joueur \", players[currentPlayerIndex].id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-name\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Lancer le d\\xE9\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DiceRoll, {\n              onRoll: rollDice\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Game, \"Ch5kgO7EkDPL33nTXMeLUzMpyWE=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","Player","DiceRoll","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","players","setPlayers","id","globalScore","roundScore","currentPlayerIndex","setCurrentPlayerIndex","rollDice","value","updatedPlayers","map","player","index","nextPlayerIndex","length","resetPlayers","children","className","fileName","_jsxFileName","lineNumber","columnNumber","isActive","onRoll","_c","$RefreshReg$"],"sources":["/Users/mat/workspace/ProjetStudi/gamestudiprojet/src/components/game.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport Player from \"./player\";\nimport { PlayerData } from \"./playerData\";\nimport DiceRoll from \"./diceRoll\";\nimport \"../styles/game.css\";\n\nfunction Game() {\n  const [players, setPlayers] = useState<PlayerData[]>([\n    { id: 1, globalScore: 0, roundScore: 0 },\n    { id: 2, globalScore: 0, roundScore: 0 },\n  ]);\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState<number>(0);\n\n  const rollDice = (value: number) => {\n    // Mettre à jour le score du joueur en cours\n    const updatedPlayers = players.map((player, index) => {\n      if (index === currentPlayerIndex) {\n        return {\n          ...player,\n          roundScore: player.roundScore + value,\n        };\n      }\n      return player;\n    });\n    setPlayers(updatedPlayers);\n\n    // Passer au joueur suivant si le dé affiche 1 ou si le tour est terminé\n    if (value === 1 || updatedPlayers[currentPlayerIndex].roundScore >= 20) {\n      const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;\n      setCurrentPlayerIndex(nextPlayerIndex);\n\n      // Réinitialiser le score de tous les joueurs\n      const resetPlayers = players.map((player) => ({\n        ...player,\n        roundScore: 0,\n      }));\n      setPlayers(resetPlayers);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"image\">\n        <div className=\"game-container\">\n          <h1>Mon jeu de dés</h1>\n          <div className=\"player-info-container\">\n            {players.map((player, index) => (\n              <Player\n                key={player.id}\n                player={player}\n                id={index + 1}\n                isActive={index === currentPlayerIndex}\n              />\n            ))}\n          </div>\n          <div className=\"game__turn\">\n            <h2>Tour de Joueur {players[currentPlayerIndex].id}</h2>\n            <div className=\"player-name\">\n              <p>Lancer le dé</p>\n              <DiceRoll onRoll={rollDice} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}