{"ast":null,"code":"var _jsxFileName = \"/Users/mat/workspace/ProjetStudi/gamestudiprojet/src/components/game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Player from \"./player\";\nimport DiceRoll from \"./diceRoll\";\nimport \"../styles/game.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst buttonStyles = {\n  backgroundColor: \"black\",\n  color: \"white\",\n  padding: \"10px\",\n  margin: \"0.5rem\",\n  borderRadius: \"0.2rem\",\n  width: \"42%\",\n  boxShadow: \"none\",\n  border: \"none\",\n  cursor: \"pointer\",\n  fontSize: 16,\n  fontWeight: \"bold\",\n  letterSpacing: 0.25\n};\nfunction resetGame() {\n  return [{\n    id: 1,\n    globalScore: 0,\n    roundScore: 0\n  }, {\n    id: 2,\n    globalScore: 0,\n    roundScore: 0\n  }];\n}\nfunction Game() {\n  _s();\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\n  const [wins, setWins] = useState([0, 0]);\n  const [players, setPlayers] = useState([{\n    id: 1,\n    globalScore: 0,\n    roundScore: 0\n  }, {\n    id: 2,\n    globalScore: 0,\n    roundScore: 0\n  }]);\n  function restartGame() {\n    setWins([0, 0]);\n    setPlayers([{\n      id: 1,\n      globalScore: 0,\n      roundScore: 0\n    }, {\n      id: 2,\n      globalScore: 0,\n      roundScore: 0\n    }]);\n    setCurrentPlayerIndex(0);\n  }\n  const rollDice = value => {\n    // Mettre à jour le score du joueur en cours\n    const updatedPlayers = updatePlayerScore(players, currentPlayerIndex, value);\n\n    // Si le joueur actuel a fait deux lancers, passer au joueur suivant\n    if (value === 1 || value === 6) {\n      const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;\n      setCurrentPlayerIndex(nextPlayerIndex);\n    }\n\n    // Mettre à jour les scores globaux si le joueur a atteint 100 points\n    if (updatedPlayers) {\n      setPlayers(updatedPlayers);\n    }\n  };\n\n  //   const rollDice = (value: number) => {\n  //     // Mettre à jour le score du joueur en cours\n  //     const updatedPlayers = players.map((player, index) => {\n  //       if (index === currentPlayerIndex) {\n  //         return {\n  //           ...player,\n  //           roundScore: player.roundScore + value,\n  //         };\n  //       }\n  //       return player;\n  //     });\n\n  //     // Si le joueur actuel a fait deux lancers, passer au joueur suivant\n  //     if (value === 1 || value === 6) {\n  //       const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;\n  //       setCurrentPlayerIndex(nextPlayerIndex);\n  //     }\n\n  //     // Mettre à jour les scores globaux si le joueur a atteint 100 points\n  //     const currentPlayer = updatedPlayers[currentPlayerIndex];\n  //     if (currentPlayer.roundScore + currentPlayer.globalScore >= 100) {\n  //       alert(`Le joueur ${currentPlayer.id} a gagné !`);\n  //       const updatedWins = [...wins];\n  //       const winnerIndex = currentPlayer.id - 1;\n  //       updatedWins[winnerIndex] += 1;\n  //       setWins(updatedWins);\n\n  //       setPlayers(resetGame);\n  //       setCurrentPlayerIndex(0);\n  //     } else {\n  //       setPlayers(updatedPlayers);\n  //     }\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: buttonStyles,\n          className: \"click\",\n          onClick: restartGame,\n          children: \"New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-info-container\",\n            children: players.map((player, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Player, {\n                player: player,\n                id: index + 1,\n                isActive: index === currentPlayerIndex\n              }, player.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 19\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"player-info-container\",\n                children: [\"Wins: \", wins[index]]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)\n        }, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"player-info-container\",\n            children: [\"Tour du Joueur \", players[currentPlayerIndex].id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(DiceRoll, {\n              onRoll: rollDice\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Game, \"6kpO+F0x2qsU6/4buHDNZckYCDM=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","Player","DiceRoll","jsxDEV","_jsxDEV","Fragment","_Fragment","buttonStyles","backgroundColor","color","padding","margin","borderRadius","width","boxShadow","border","cursor","fontSize","fontWeight","letterSpacing","resetGame","id","globalScore","roundScore","Game","_s","currentPlayerIndex","setCurrentPlayerIndex","wins","setWins","players","setPlayers","restartGame","rollDice","value","updatedPlayers","updatePlayerScore","nextPlayerIndex","length","children","className","style","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","player","index","isActive","onRoll","_c","$RefreshReg$"],"sources":["/Users/mat/workspace/ProjetStudi/gamestudiprojet/src/components/game.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport Player from \"./player\";\nimport { PlayerData } from \"./playerData\";\nimport DiceRoll from \"./diceRoll\";\nimport \"../styles/game.css\";\n\nconst buttonStyles = {\n  backgroundColor: \"black\",\n  color: \"white\",\n  padding: \"10px\",\n  margin: \"0.5rem\",\n  borderRadius: \"0.2rem\",\n  width: \"42%\",\n  boxShadow: \"none\",\n  border: \"none\",\n  cursor: \"pointer\",\n  fontSize: 16,\n  fontWeight: \"bold\",\n  letterSpacing: 0.25,\n};\nfunction resetGame() {\n  return [\n    { id: 1, globalScore: 0, roundScore: 0 },\n    { id: 2, globalScore: 0, roundScore: 0 },\n  ];\n}\n\nfunction Game() {\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState<number>(0);\n  const [wins, setWins] = useState<number[]>([0, 0]);\n  const [players, setPlayers] = useState<PlayerData[]>([\n    { id: 1, globalScore: 0, roundScore: 0 },\n    { id: 2, globalScore: 0, roundScore: 0 },\n  ]);\n\n  function restartGame() {\n    setWins([0, 0]);\n    setPlayers([\n      { id: 1, globalScore: 0, roundScore: 0 },\n      { id: 2, globalScore: 0, roundScore: 0 },\n    ]);\n    setCurrentPlayerIndex(0);\n  }\n\n  const rollDice = (value: number) => {\n    // Mettre à jour le score du joueur en cours\n    const updatedPlayers = updatePlayerScore(\n      players,\n      currentPlayerIndex,\n      value\n    );\n\n    // Si le joueur actuel a fait deux lancers, passer au joueur suivant\n    if (value === 1 || value === 6) {\n      const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;\n      setCurrentPlayerIndex(nextPlayerIndex);\n    }\n\n    // Mettre à jour les scores globaux si le joueur a atteint 100 points\n    if (updatedPlayers) {\n      setPlayers(updatedPlayers);\n    }\n  };\n\n  //   const rollDice = (value: number) => {\n  //     // Mettre à jour le score du joueur en cours\n  //     const updatedPlayers = players.map((player, index) => {\n  //       if (index === currentPlayerIndex) {\n  //         return {\n  //           ...player,\n  //           roundScore: player.roundScore + value,\n  //         };\n  //       }\n  //       return player;\n  //     });\n\n  //     // Si le joueur actuel a fait deux lancers, passer au joueur suivant\n  //     if (value === 1 || value === 6) {\n  //       const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;\n  //       setCurrentPlayerIndex(nextPlayerIndex);\n  //     }\n\n  //     // Mettre à jour les scores globaux si le joueur a atteint 100 points\n  //     const currentPlayer = updatedPlayers[currentPlayerIndex];\n  //     if (currentPlayer.roundScore + currentPlayer.globalScore >= 100) {\n  //       alert(`Le joueur ${currentPlayer.id} a gagné !`);\n  //       const updatedWins = [...wins];\n  //       const winnerIndex = currentPlayer.id - 1;\n  //       updatedWins[winnerIndex] += 1;\n  //       setWins(updatedWins);\n\n  //       setPlayers(resetGame);\n  //       setCurrentPlayerIndex(0);\n  //     } else {\n  //       setPlayers(updatedPlayers);\n  //     }\n  //   };\n\n  return (\n    <>\n      <div className=\"image\">\n        <div className=\"game-container\">\n          <button style={buttonStyles} className=\"click\" onClick={restartGame}>\n            New Game\n          </button>\n          <>\n            <div className=\"player-info-container\">\n              {players.map((player, index) => (\n                <div>\n                  <Player\n                    key={player.id}\n                    player={player}\n                    id={index + 1}\n                    isActive={index === currentPlayerIndex}\n                  />{\" \"}\n                  <p className=\"player-info-container\">Wins: {wins[index]}</p>\n                </div>\n              ))}\n            </div>\n          </>\n          <div>\n            <h2 className=\"player-info-container\">\n              Tour du Joueur {players[currentPlayerIndex].id}\n            </h2>\n            <div>\n              <DiceRoll onRoll={rollDice} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}