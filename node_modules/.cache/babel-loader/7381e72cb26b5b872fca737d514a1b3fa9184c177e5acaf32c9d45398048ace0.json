{"ast":null,"code":"var _jsxFileName = \"/Users/mat/workspace/ProjetStudi/gamestudiprojet/src/components/game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Player from \"./player\";\nimport DiceRoll from \"./diceRoll\";\nimport \"../styles/game.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst buttonStyles = {\n  backgroundColor: \"black\",\n  color: \"white\",\n  padding: \"10px\",\n  margin: \"0.5rem\",\n  borderRadius: \"0.2rem\",\n  width: \"40%\",\n  boxShadow: \"none\",\n  border: \"none\",\n  cursor: \"pointer\",\n  fontSize: 16,\n  fontWeight: \"bold\",\n  letterSpacing: 0.25\n};\nfunction resetGame() {\n  return [{\n    id: 1,\n    globalScore: 0,\n    roundScore: 0\n  }, {\n    id: 2,\n    globalScore: 0,\n    roundScore: 0\n  }];\n}\nfunction Game() {\n  _s();\n  //   function getWinner(players: PlayerData[]): number | undefined {\n  //     // Trouver le joueur avec le score global le plus élevé\n  //     const maxScore = Math.max(...players.map((player) => player.globalScore));\n  //     const winner = players.find((player) => player.globalScore === maxScore);\n\n  //     // S'il y a un gagnant, retourner son id\n  //     if (winner) {\n  //       winner.globalScore++;\n  //       return winner.id;\n  //     }\n\n  //     // S'il n'y a pas de gagnant, retourner undefined\n  //     return undefined;\n  //   }\n  function restartGame() {\n    setPlayers([{\n      id: 1,\n      globalScore: 0,\n      roundScore: 0\n    }, {\n      id: 2,\n      globalScore: 0,\n      roundScore: 0\n    }]);\n    setCurrentPlayerIndex(0);\n  }\n  const [players, setPlayers] = useState([{\n    id: 1,\n    globalScore: 0,\n    roundScore: 0\n  }, {\n    id: 2,\n    globalScore: 0,\n    roundScore: 0\n  }]);\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);\n  const [wins, setWins] = useState([0, 0]);\n  const rollDice = value => {\n    // Mettre à jour le score du joueur en cours\n    const updatedPlayers = players.map((player, index) => {\n      if (index === currentPlayerIndex) {\n        return {\n          ...player,\n          roundScore: player.roundScore + value\n        };\n      }\n      return player;\n    });\n\n    // Si le joueur actuel a fait deux lancers, passer au joueur suivant\n    if (value === 1 || value === 6) {\n      const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;\n      setCurrentPlayerIndex(nextPlayerIndex);\n    }\n\n    // Mettre à jour les scores globaux si le joueur a atteint 100 points\n    const currentPlayer = updatedPlayers[currentPlayerIndex];\n    if (currentPlayer.roundScore + currentPlayer.globalScore >= 100) {\n      alert(`Le joueur ${currentPlayer.id} a gagné !`);\n      const updatedWins = [...wins];\n      const winnerIndex = currentPlayer.id - 1;\n      updatedWins[winnerIndex] += 1;\n      setWins(updatedWins);\n      setPlayers(resetGame);\n      setCurrentPlayerIndex(0);\n    } else {\n      setPlayers(updatedPlayers);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: buttonStyles,\n          className: \"click\",\n          onClick: restartGame,\n          children: \"New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \" test \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-info-container\",\n            children: players.map((player, index) => /*#__PURE__*/_jsxDEV(Player, {\n              player: player,\n              id: index + 1,\n              isActive: index === currentPlayerIndex\n            }, player.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game__turn\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Tour de Joueur \", players[currentPlayerIndex].id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-name\",\n            children: /*#__PURE__*/_jsxDEV(DiceRoll, {\n              onRoll: rollDice\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Game, \"q/B1IWO/Q3OiIjNbV2baIxsXwy8=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","Player","DiceRoll","jsxDEV","_jsxDEV","Fragment","_Fragment","buttonStyles","backgroundColor","color","padding","margin","borderRadius","width","boxShadow","border","cursor","fontSize","fontWeight","letterSpacing","resetGame","id","globalScore","roundScore","Game","_s","restartGame","setPlayers","setCurrentPlayerIndex","players","currentPlayerIndex","wins","setWins","rollDice","value","updatedPlayers","map","player","index","nextPlayerIndex","length","currentPlayer","alert","updatedWins","winnerIndex","children","className","style","onClick","fileName","_jsxFileName","lineNumber","columnNumber","isActive","onRoll","_c","$RefreshReg$"],"sources":["/Users/mat/workspace/ProjetStudi/gamestudiprojet/src/components/game.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport Player from \"./player\";\nimport { PlayerData } from \"./playerData\";\nimport DiceRoll from \"./diceRoll\";\nimport \"../styles/game.css\";\n\nconst buttonStyles = {\n  backgroundColor: \"black\",\n  color: \"white\",\n  padding: \"10px\",\n  margin: \"0.5rem\",\n  borderRadius: \"0.2rem\",\n  width: \"40%\",\n  boxShadow: \"none\",\n  border: \"none\",\n  cursor: \"pointer\",\n  fontSize: 16,\n  fontWeight: \"bold\",\n  letterSpacing: 0.25,\n};\nfunction resetGame() {\n  return [\n    { id: 1, globalScore: 0, roundScore: 0 },\n    { id: 2, globalScore: 0, roundScore: 0 },\n  ];\n}\n\nfunction Game() {\n  //   function getWinner(players: PlayerData[]): number | undefined {\n  //     // Trouver le joueur avec le score global le plus élevé\n  //     const maxScore = Math.max(...players.map((player) => player.globalScore));\n  //     const winner = players.find((player) => player.globalScore === maxScore);\n\n  //     // S'il y a un gagnant, retourner son id\n  //     if (winner) {\n  //       winner.globalScore++;\n  //       return winner.id;\n  //     }\n\n  //     // S'il n'y a pas de gagnant, retourner undefined\n  //     return undefined;\n  //   }\n  function restartGame() {\n    setPlayers([\n      { id: 1, globalScore: 0, roundScore: 0 },\n      { id: 2, globalScore: 0, roundScore: 0 },\n    ]);\n    setCurrentPlayerIndex(0);\n  }\n  const [players, setPlayers] = useState<PlayerData[]>([\n    { id: 1, globalScore: 0, roundScore: 0 },\n    { id: 2, globalScore: 0, roundScore: 0 },\n  ]);\n  const [currentPlayerIndex, setCurrentPlayerIndex] = useState<number>(0);\n  const [wins, setWins] = useState<number[]>([0, 0]);\n\n  const rollDice = (value: number) => {\n    // Mettre à jour le score du joueur en cours\n    const updatedPlayers = players.map((player, index) => {\n      if (index === currentPlayerIndex) {\n        return {\n          ...player,\n          roundScore: player.roundScore + value,\n        };\n      }\n      return player;\n    });\n\n    // Si le joueur actuel a fait deux lancers, passer au joueur suivant\n    if (value === 1 || value === 6) {\n      const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;\n      setCurrentPlayerIndex(nextPlayerIndex);\n    }\n\n    // Mettre à jour les scores globaux si le joueur a atteint 100 points\n    const currentPlayer = updatedPlayers[currentPlayerIndex];\n    if (currentPlayer.roundScore + currentPlayer.globalScore >= 100) {\n      alert(`Le joueur ${currentPlayer.id} a gagné !`);\n      const updatedWins = [...wins];\n      const winnerIndex = currentPlayer.id - 1;\n      updatedWins[winnerIndex] += 1;\n      setWins(updatedWins);\n\n      setPlayers(resetGame);\n      setCurrentPlayerIndex(0);\n    } else {\n      setPlayers(updatedPlayers);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"image\">\n        <div className=\"game-container\">\n          <button style={buttonStyles} className=\"click\" onClick={restartGame}>\n            New Game\n          </button>\n          <>\n            <p> test </p>\n            <div className=\"player-info-container\">\n              {players.map((player, index) => (\n                <Player\n                  key={player.id}\n                  player={player}\n                  id={index + 1}\n                  isActive={index === currentPlayerIndex}\n                />\n              ))}\n            </div>\n          </>\n\n          <div className=\"game__turn\">\n            <h2>Tour de Joueur {players[currentPlayerIndex].id}</h2>\n            <div className=\"player-name\">\n              <DiceRoll onRoll={rollDice} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}